Description: >
    Goodness Chris-Ugari/Udacity Project: Deploy a high-availability web app using CloudFormation

Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
    EnvironmentName: 
      Description: An Environment name that will be prefixed to resources
      Type: String

    webAppLaunchConfigVersionNumber:
      Type: String
      Default: 1

    AMI:
      Description: AMI to use for our base image
      Type: String

    InstanceType:
      Description: "The EC2 instance type of general purpose"
      Type: String
      AllowedValues: [t2.small,t3.small]

Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
    UdacityS3ReadOnlyEC2:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                  - ec2.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          Path: /
    
    RolePolicies:
        Type: AWS::IAM::Policy
        Properties:
          PolicyName: fullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: 's3:Get*'
              Resource: 
              - arn:aws:s3:::udagramdemoapp
              - arn:aws:s3:::udagramdemoapp/*
          Roles:
          - !Ref UdacityS3ReadOnlyEC2
          
# Attach an instance profile to the role created
    ServerInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
          Path: "/"
          Roles:
          - Ref: UdacityS3ReadOnlyEC2

# create a security group for the load balancer
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our load balancer
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

# create another security group this time for the servers
    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our hosts and SSH from local only
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0

#create a launch configuration file for the EC2 instances 
    WebAppLaunchConfig:
        Type: AWS::EC2::LaunchTemplate
        Properties: 
          LaunchTemplateData:
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash
                apt-get update -y
                apt-get install unzip awscli -y
                apt-get install apache2 -y
                systemctl start apache2.service
                sudo rm /var/www/html/index.html
                aws s3 cp s3://udagramdemoapp/udagram-app.zip .
                unzip udagram-app -d /var/www/html
                sudo systemctl restart apache2.service
            ImageId: !Ref AMI
            IamInstanceProfile:
                Name: !Ref ServerInstanceProfile
            SecurityGroupIds:
            - Ref: WebServerSecGroup
            InstanceType: !Ref InstanceType
            BlockDeviceMappings:
            - DeviceName: "/dev/sdk"
              Ebs:
                VolumeSize: '10'

# create an auto scaling group for the EC2 instances already created
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          VPCZoneIdentifier:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PRIVN1-SN"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PRIVN2-SN"
          LaunchTemplate:
            LaunchTemplateId: !Ref WebAppLaunchConfig
            Version: !Ref webAppLaunchConfigVersionNumber
          MinSize: '4'
          MaxSize: '6'
          TargetGroupARNs:
          - Ref: WebAppTargetGroup
# attach the instances created to a load balancer and add a listener on Port 80
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
          SecurityGroups:
          - Ref: LBSecGroup
    
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
          LoadBalancerArn:
            Ref: WebAppLB
          Port: '80'
          Protocol: HTTP
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref 'Listener'
          Priority: 1

# attach the instances created to a target group 
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 30
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-VPCID"

Outputs: 
  # This is also optional.
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.
    LoadBalancer:
      Description: A reference to the Application Load Balancer
      Value: !Ref WebAppLB

    LoadBalancerUrl:
      Description: The URL of the ALB
      Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]
